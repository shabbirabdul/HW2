{
  "name": "mockfs",
  "description": "Mocking FS module implementation for testing purpouses",
  "version": "0.1.5",
  "author": {
    "name": "Oleg Elifantiev",
    "email": "oleg@elifantiev.ru"
  },
  "contributors": [],
  "keywords": [
    "fs",
    "file system",
    "mock",
    "testing"
  ],
  "bugs": {
    "url": "https://github.com/Olegas/mockfs/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Olegas/mockfs.git"
  },
  "devDependencies": {
    "mocha": "",
    "coveralls": "",
    "istanbul": "",
    "mocha-istanbul": "",
    "assert": ""
  },
  "scripts": {
    "instrument": "node ./node_modules/.bin/istanbul instrument --output lib-cov --no-compact --variable global.__coverage__ lib",
    "test-cov": "npm run-script instrument && COVER=mockfs ISTANBUL_REPORTERS=lcovonly node ./node_modules/.bin/mocha -R mocha-istanbul",
    "test": "node ./node_modules/mocha/bin/mocha -R spec"
  },
  "engines": {
    "node": ">=0.8"
  },
  "readme": "mockfs\n======\n\n[![Build Status](https://travis-ci.org/Olegas/mockfs.png)](https://travis-ci.org/Olegas/mockfs)\n[![Coverage Status](https://coveralls.io/repos/Olegas/mockfs/badge.png?branch=master)](https://coveralls.io/r/Olegas/mockfs)\n[![NPM version](https://badge.fury.io/js/mockfs.png)](http://badge.fury.io/js/mockfs)\n[![Dependency Status](https://gemnasium.com/Olegas/mockfs.png)](https://gemnasium.com/Olegas/mockfs)\n\n\nMockFS - Mocking FS module implementation for testing purpouses.\n\nBasic idea is to declare file system contents via JSON spec, mount it, and use through real `fs.*` functions like an ordinary one.\n\n```javascript\n/**\n * /\n *  file-buffer\n *  file-base64\n *  file-string\n *  file-alt\n *  dir/\n *      file-in-dir\n */\nvar fs = require('fs'),\n    MockFS = require('mockfs'),\n    spec, mfs, fd;\n\nspec = {\n  time: 'Tue May 07 2013 17:09:57 GMT+0400' // global default time for any FS item, optional\n  ctime: new Date(),                        // creation time default, optional\n/*atime: ...,                               // atime and ctime is not set\n  mtime: ...,*/                             // value is taken from FS defaults (time)\n  items: {\n    'file-buffer': new Buffer('qwerty'),    // specify content as Buffer\n    'file-base64': new Buffer('cXdlcnR5', 'base64'), // buffer with encoding\n    'file-string': 'qwerty',                // or as string\n    'file-alt': {                           // alternative syntax\n      uid: 'johndoe',                       // owner user, as login name or id\n      gid: 300,                             // owner group\n      mode: 0766,                           // access mode\n      atime: new Date(),                    // Date instance\n      mtime: 1000255364,                    // timestamp\n      ctime: \"-500\"                         // number with a sign (+/-) - delta from fs default value\n      content: 'asobject'                   // file content\n    },\n    'dir': {                                // directory - always an object with items property (which is object too)\n      atime: 'Tue May 07 2013 17:09:57 GMT+0400' // Date as string\n      mtime: \"+500\",                        // stats, uid, gid, mode - on directories too\n    /*ctime*/                               // ctime is not set, value taken from FS defaults  \n      items: {                              // directory contents\n        'file-in-dir': 'inside directory'             \n      }\n    }\n};\n\nmfs = new MockFS(spec);\nmfs.mount('/mnt/mock');\n\nfs.existsSync('/mnt/mock/file-buffer'); // true\nfs.readFileSync('/mnt/mock/file-string').toString(); // \"qwerty\"\nfs.readFile('/mnt/mock/dir/file-in-dir', function(e, r){\n    Buffer.isBuffer(r); // true\n    r.toString(); // \"inside directory\"\n});\n\n// file descriptors is also works\nfs.open('/mnt/mock/file-base64', 'r', function(e, fd){\n    if(fd) {\n        var buf = new Buffer(100);\n        fs.read(fd, buf, 0, 100, null, function(e, bytesRead){\n            console.log(bytesRead); // 6\n            console.log(buf.toString('utf8', 0, bytesRead)); // qwerty\n            fs.closeSync(fd);\n        });    \n    }\n});\n\nmfs.umount('/mnt/mock');\n\nfs.existsSync('/mnt/mock/file-buffer'); // false\n```\n\nImplemented by wrapping bundled `fs` module's basic functions (file descriptors handling, stat, rename/delete files/directories).\nSo, functions as `createReadStream`, `appendFileSync` and so are supported \"out of the box\" without any wrapping.\n\nCurrently, NodeJS v0.8+ is supported.\n\nTODO\n-----------------\n\n - Support legacy interfaces\n - Access rights check (read/write/search permissions)\n - *chown(Sync), *chmod(Sync) functions\n - Links support\n - (un)watch(File) support\n - `mirror` utility to create MockFS specs from real file systems\n - Integrate with some date parsing library for convinient atime/ctime/mtime specification\n\nRoadmap\n-------\n\n### v0.2\n\n - Access rights check (read/write/search permissions)\n - *chown(Sync), *chmod(Sync) functions\n\n### v0.3\n\n - Links support\n - (un)watch(File) support\n\n### v1.0\n\n - Support legacy interfaces\n - Pass NodeJS test suite\n\n\nSimilar libraries\n------------------\n - [fake-fs](https://github.com/eldargab/node-fake-fs) by [Eldar Gabdullin](https://github.com/eldargab)\n\n\n",
  "readmeFilename": "README.md",
  "_id": "mockfs@0.1.5",
  "_from": "mockfs@^0.1.5"
}
